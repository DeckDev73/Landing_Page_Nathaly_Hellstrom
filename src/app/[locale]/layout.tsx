import { NextIntlClientProvider, hasLocale } from "next-intl";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../globals.css";
import { getMessages } from "next-intl/server";
import localFont from "next/font/local";

// === Fuentes Google ===
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// === Fuentes locales ===
const Montserrat = localFont({
  src: [
    { path: "./fonts/Montserrat-VariableFont_wght.ttf", weight: "400", style: "normal" },
    { path: "./fonts/Montserrat-VariableFont_wght.ttf", weight: "700", style: "normal" },
  ],
  variable: "--Montserrat",
  display: "swap",
});

const AnticDidone = localFont({
  src: [
    { path: "./fonts/AnticDidone-Regular.ttf", weight: "400", style: "normal" },
    { path: "./fonts/AnticDidone-Regular.ttf", weight: "700", style: "normal" },
  ],
  variable: "--AnticDidone",
  display: "swap",
});

const ArchivoBlack = localFont({
  src: [
    { path: "./fonts/ArchivoBlack-Regular.ttf", weight: "400", style: "normal" },
    { path: "./fonts/ArchivoBlack-Regular.ttf", weight: "700", style: "normal" },
  ],
  variable: "--ArchivoBlack",
  display: "swap",
});


const Gabriola = localFont({
  src: [
    { path: "./fonts/GabriolaFont.ttf", weight: "400", style: "normal" },
    { path: "./fonts/GabriolaFont.ttf", weight: "700", style: "normal" },
  ],
  variable: "--Gabriola",
  display: "swap",
});

// === Metadatos base ===
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// === Layout principal ===
export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;

  // Si el locale no existe, muestra página 404
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  // Obtiene los mensajes según el idioma
  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${Montserrat.variable} ${AnticDidone.variable} ${ArchivoBlack.variable} ${Gabriola.variable} antialiased`}
      >
        <NextIntlClientProvider messages={messages}>
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
